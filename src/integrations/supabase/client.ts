
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://tagpzwzxruxxxoldiwtt.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InRhZ3B6d3p4cnV4eHhvbGRpd3R0Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDQ1MTYxODcsImV4cCI6MjA2MDA5MjE4N30.vyS_a_MAXGwzeUfvmoqMHOI0T5EtZaACoPwSSGbjq4I";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Helper function to handle errors from Supabase operations
export const handleSupabaseError = (error: any, defaultMessage = "An error occurred"): string => {
  console.error("Supabase operation error:", error);
  return error?.message || defaultMessage;
};

// Helper function to create a new event
export const createEvent = async (eventName: string, userId: string) => {
  try {
    // Generate event code using the edge function
    const { data: eventCode, error: codeError } = await supabase.functions.invoke('generate-event-code');
    
    if (codeError) throw codeError;
    
    // Create event in the database
    const { data: event, error: eventError } = await supabase.from('events').insert({
      name: eventName,
      code: eventCode.code,
      created_by: userId
    }).select().single();
    
    if (eventError) throw eventError;
    
    // Create Pinecone index for the event
    const { data: indexData, error: indexError } = await supabase.functions.invoke('create-pinecone-index', {
      body: {
        eventId: event.id,
        eventName: event.name,
        eventCode: event.code
      }
    });
    
    if (indexError) {
      console.error("Error creating Pinecone index:", indexError);
      // Continue anyway, as the event was created successfully
    } else {
      console.log("Pinecone index created:", indexData);
    }

    // Automatically create an entry in the participants table
    const { error: participantError } = await supabase
      .from('participants')
      .insert({
        event_id: event.id,
        user_id: userId
      });
    
    if (participantError) {
      console.error("Error adding user as participant:", participantError);
    }

    // Get or create a profile for this user in this event
    const { data: existingProfile, error: profileCheckError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .eq('event_id', event.id)
      .maybeSingle();
    
    if (profileCheckError) {
      console.error("Error checking existing profile:", profileCheckError);
    }

    // If no profile exists yet, try to find profile from another event or create a minimal one
    if (!existingProfile) {
      // First try to get a profile from any other event
      const { data: otherProfile, error: otherProfileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .limit(1)
        .maybeSingle();
      
      if (otherProfileError) {
        console.error("Error fetching profile from other events:", otherProfileError);
      }

      // Get user data
      const { data: userData, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error("Error fetching user data:", userError);
      }

      // Create a profile using existing data or minimal data if nothing exists
      const newProfile = {
        id: userId,
        event_id: event.id,
        email: userData?.user?.email || '',
        name: otherProfile?.name || userData?.user?.email?.split('@')[0] || 'User',
        // Copy other fields from the existing profile if available
        age: otherProfile?.age || null,
        gender: otherProfile?.gender || null,
        hobbies: otherProfile?.hobbies || null,
        skills: otherProfile?.skills || [],
        interests: otherProfile?.interests || [],
        about_you: otherProfile?.about_you || null,
        linkedin_url: otherProfile?.linkedin_url || null
      };

      const { error: createProfileError } = await supabase
        .from('profiles')
        .insert(newProfile);
      
      if (createProfileError) {
        console.error("Error creating profile:", createProfileError);
      } else {
        // Generate embedding for the new profile
        await generateProfileEmbedding(userId, event.id);
      }
    }
    
    return { success: true, event };
  } catch (error) {
    console.error("Error creating event:", error);
    return { success: false, error };
  }
};

// Helper function to join an event
export const joinEvent = async (eventCode: string, userId: string) => {
  try {
    // Find event by code
    const { data: eventData, error: eventError } = await supabase
      .from('events')
      .select('*')
      .eq('code', eventCode)
      .single();
    
    if (eventError) throw eventError;
    
    // Check if user is already a participant
    const { data: existingParticipant, error: participantError } = await supabase
      .from('participants')
      .select('*')
      .eq('event_id', eventData.id)
      .eq('user_id', userId)
      .maybeSingle();
    
    if (participantError) throw participantError;
    
    // If user is not already a participant, add them
    if (!existingParticipant) {
      const { error: joinError } = await supabase
        .from('participants')
        .insert({
          event_id: eventData.id,
          user_id: userId
        });
      
      if (joinError) throw joinError;
    }

    // Check if user already has a profile for this event
    const { data: existingProfile, error: profileCheckError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .eq('event_id', eventData.id)
      .maybeSingle();
    
    if (profileCheckError) {
      console.error("Error checking existing profile:", profileCheckError);
    }

    // If no profile exists yet, try to find profile from another event or create a minimal one
    if (!existingProfile) {
      // First try to get a profile from any other event
      const { data: otherProfile, error: otherProfileError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', userId)
        .limit(1)
        .maybeSingle();
      
      if (otherProfileError) {
        console.error("Error fetching profile from other events:", otherProfileError);
      }

      // Get user data
      const { data: userData, error: userError } = await supabase.auth.getUser();
      
      if (userError) {
        console.error("Error fetching user data:", userError);
      }

      // Create a profile using existing data or minimal data if nothing exists
      const newProfile = {
        id: userId,
        event_id: eventData.id,
        email: userData?.user?.email || '',
        name: otherProfile?.name || userData?.user?.email?.split('@')[0] || 'User',
        // Copy other fields from the existing profile if available
        age: otherProfile?.age || null,
        gender: otherProfile?.gender || null,
        hobbies: otherProfile?.hobbies || null,
        skills: otherProfile?.skills || [],
        interests: otherProfile?.interests || [],
        about_you: otherProfile?.about_you || null,
        linkedin_url: otherProfile?.linkedin_url || null
      };

      const { error: createProfileError } = await supabase
        .from('profiles')
        .insert(newProfile);
      
      if (createProfileError) {
        console.error("Error creating profile:", createProfileError);
      } else {
        // Generate embedding for the new profile
        await generateProfileEmbedding(userId, eventData.id);
      }
    }
    
    return { success: true, event: eventData };
  } catch (error) {
    console.error("Error joining event:", error);
    return { success: false, error };
  }
};

// Helper function to generate embedding for a user profile
export const generateProfileEmbedding = async (userId: string, eventId: string) => {
  try {
    // Get profile data
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .eq('event_id', eventId)
      .single();
    
    if (profileError) throw profileError;
    
    if (!profileData) {
      throw new Error("Profile not found");
    }
    
    // Get event data to determine the Pinecone index name
    const { data: eventData, error: eventError } = await supabase
      .from('events')
      .select('name')
      .eq('id', eventId)
      .single();
      
    if (eventError) throw eventError;
    
    // Generate the pinecone index name based on event name
    // Using the same format as in create-pinecone-index function: evt-{sanitized-event-name}
    const indexName = `evt-${eventData.name.toLowerCase().replace(/[^a-z0-9]/g, '-').replace(/-+/g, '-').replace(/^-|-$/g, '').substring(0, 20)}`;
    
    console.log(`Using Pinecone index name for event ${eventId}: ${indexName}`);
    
    // Call the generate-embedding function
    const { data, error } = await supabase.functions.invoke('generate-embedding', {
      body: { 
        userId, 
        eventId, 
        profileData,
        pineconeIndex: indexName // Explicitly pass the index name
      }
    });
    
    if (error) throw error;
    
    return { success: true, data };
  } catch (error) {
    console.error("Error generating profile embedding:", error);
    return { success: false, error };
  }
};
